enum ClassStatus {
    ACTIVE
    INACTIVE
    WILL_END
}

type Class implements BaseSchema {
    id: ID!
    name: String!
    room: String
    code: String!
    status: ClassStatus!
    users: [UserClassResponse!]
    reportUrl: String

    createdBy: String!
    createdAt: String!
    updatedBy: String
    updatedAt: String
    isDeleted: Boolean!
}

type ClassPagination implements PaginationResponse {
    data: [Class!]!
    page: Int!
    size: Int!
    totalPage: Int!
    totalSize: Int!
}

input ClassNew {
    name: String!
    room: String
}

input ClassUpdate {
    name: String!
    room: String
    status: ClassStatus!
    reportUrl: String
}

type UserClassResponse {
    id: ID!
    fullName: String!
    email: String!
}
# input ClassUpdateUser {
#   name: String!
#   room: String
#   status: ClassStatus!
#   userIds: [String!]!
# }
type ResponseDeleteClass implements ResponseDelete{
    deleted: Class
    error: Object
    status: Boolean!
}
type ClassQuery {
    findAll: [Class!]!
    findAllWithPageable(page: Int!, size: Int!): ClassPagination!
    findAllDeleted: [Class!]!
    findAllDeletedWithPageable(page: Int!, size: Int!): ClassPagination!
    findById(id: ID!): Class
}

type ClassMutation {
    save(request: ClassNew!): Class
    deleteById(id: ID!): ResponseDeleteClass!
    updateById(id: ID!, request: ClassUpdate!): Class
    join(classCode: String!, userId: String!): Class
}
