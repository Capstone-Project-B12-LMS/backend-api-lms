type Material implements BaseSchema {
    id: ID!
    classEntity: Class
    title: String!
    content: String!
    #    category: Category # TODO: create category schema graohql and CRUD category first
    #    topic: Topic TODO: create topic schema graphql and CRUD topic first
    videoUrl: String
    fileUrl: String
    deadline: String
    point: Int

    createdBy: String!
    createdAt: String!
    updatedBy: String
    updatedAt: String
    isDeleted: Boolean!
}

input MaterialNew {
    classId: ID!
    title: String!
    content: String!
    #    category: String # create category CRUD first
    topicId: String

    # TODO: learn how to get uploaded file in graphql first
    video: String

    # TODO: learn how to get uploaded file in graphql first
    file: String

    #  please use format dd/MM/yyyy HH:mm:ss to insert deadline, example 30/12/2022 23:59:00
    deadline: String
    point: Int
}

type ResponseDeleteMaterial implements ResponseDelete {
    deleted: Material
    error: Object
    status: Boolean!
}

type MaterialPagination implements PaginationResponse {
    data: [Material!]!
    page: Int!
    size: Int!
    totalPage: Int!
    totalSize: Int!
}

type MaterialQuery {
    #    findAll: [Material!]!
    #    findAllWithPageable(page: Int!, size: Int!): MaterialPagination!
    #    findAllDeleted: [Material!]!
    #    findAllDeletedWithPageable(page: Int!, size: Int!): MaterialPagination!
    findById(id: ID!): Material
    findAllByClassId(classId: ID!): [Material!]
}

type MaterialMutation {
    save(request: MaterialNew!): Material
    update(id: ID!, request: MaterialNew!): Material
    #    deleteById(id: ID!): ResponseDeleteMaterial!
}